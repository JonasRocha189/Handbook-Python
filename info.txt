üìö Estrutura Recomendada do Handbook Python


0. Introdu√ß√£o

- Instala√ß√£o do Python (Anaconda, venv, pip)
- Ambientes virtuais (venv, conda)
- Gerenciamento de pacotes (pip, pipx, poetry)
- Uso de IDEs e notebooks (VS Code, PyCharm, Jupyter, Colab)
- PEP8 e boas pr√°ticas de c√≥digo
- Organiza√ß√£o de projetos (pastas, m√≥dulos e pacotes)

1. Fundamentos do Python

- Sintaxe b√°sica e coment√°rios
- Tipos de dados nativos: int, float, bool, str
- Convers√£o de tipos
- Operadores: aritm√©ticos, l√≥gicos, relacionais
- Estruturas de dados:
  - list, tuple, set, dict
  - M√©todos e opera√ß√µes comuns
- Controle de fluxo:
  - if, else, elif
  - for, while
  - break, continue, pass
- Fun√ß√µes:
  - Declara√ß√£o, par√¢metros, retorno
  - Fun√ß√µes embutidas
  - Docstrings e boas pr√°ticas
- Escopo e vari√°veis globais vs. locais
- Introdu√ß√£o a type hints (typing)

2. Manipula√ß√£o Avan√ßada de Dados

- Compreens√µes de lista, dicion√°rio, conjunto
- Geradores e generator expressions
- Manipula√ß√£o de strings:
  - Fatiamento, m√©todos de string
- Express√µes regulares (re)

Datas e horas (datetime, calendar)

Trabalhando com n√∫meros (math, decimal, fractions)

Manipula√ß√£o de arquivos:

Leitura e escrita (open, with)

Arquivos CSV, JSON, YAML

Compress√£o (zipfile, tarfile)

M√≥dulos de sistema:

os, sys, shutil, pathlib

3. Programa√ß√£o Orientada a Objetos (OOP)

Classes e objetos

Atributos e m√©todos

Encapsulamento e modificadores de acesso

Heran√ßa e polimorfismo

M√©todos e atributos de classe e est√°ticos

M√©todos m√°gicos e dunder (__init__, __str__, __repr__)

Classes abstratas (abc)

Dataclasses (dataclasses)

Property decorators (@property)

Composi√ß√£o vs. heran√ßa

4. Fun√ß√µes Avan√ßadas e Controle

Fun√ß√µes an√¥nimas (lambda)

map, filter, reduce

Decoradores e higher-order functions

Gerenciamento de contexto (with)

Manipula√ß√£o e tratamento de erros:

try, except, else, finally

Lan√ßamento de exce√ß√µes (raise)

Exce√ß√µes personalizadas

Logging (logging)

Testes automatizados (unittest, pytest)

Profiling e otimiza√ß√£o (cProfile, line_profiler)

Async e concorr√™ncia (threading, multiprocessing, asyncio)

5. Ci√™ncia de Dados com Python

NumPy:

Arrays e opera√ß√µes vetorizadas

Broadcasting e √°lgebra linear

Pandas:

S√©ries e DataFrames

Indexa√ß√£o e sele√ß√£o

Filtros, agrega√ß√µes e groupby

Mesclagem, jun√ß√µes, concatena√ß√£o

Manipula√ß√£o de datas

Visualiza√ß√£o:

Matplotlib

Seaborn

Plotly (opcional)

Estat√≠stica:

Medidas descritivas

Probabilidade b√°sica

Distribui√ß√µes

Infer√™ncia (testes t, qui-quadrado)

6. Machine Learning e IA

Pr√©-processamento:

Limpeza de dados

Escalonamento e normaliza√ß√£o

Codifica√ß√£o categ√≥rica (one-hot)

Modelos de ML:

Regress√£o linear e log√≠stica

√Årvores de decis√£o e Random Forest

Gradient Boosting

k-NN, SVM

Clustering (k-Means, DBSCAN)

Avalia√ß√£o de modelos:

M√©tricas (MSE, RMSE, Accuracy, F1-score, ROC)

Valida√ß√£o cruzada

Pipelines (sklearn.pipeline)

Introdu√ß√£o a Deep Learning:

TensorFlow ou PyTorch

Integra√ß√£o com LLMs:

Uso de APIs (OpenAI, LangChain)

Extra√ß√£o e an√°lise de texto (NLP)

7. Integra√ß√µes e Web

Requisi√ß√µes HTTP (requests)

APIs REST e JSON

Automa√ß√£o e Web Scraping:

BeautifulSoup

Selenium

Desenvolvimento Web:

Flask, FastAPI, Streamlit

Automa√ß√£o de fluxos:

Integra√ß√£o com n8n e pipelines ETL

Agendamento de tarefas (cron, Airflow)

8. Engenharia de Dados

Conex√£o com Bancos de Dados:

SQL b√°sico e avan√ßado

sqlite3, SQLAlchemy

Conex√£o com BigQuery

ETL/ELT:

Extra√ß√£o, transforma√ß√£o e carregamento

Boas pr√°ticas de pipelines

Manipula√ß√£o de grandes datasets

Otimiza√ß√£o e paraleliza√ß√£o

9. Boas Pr√°ticas e Deploy

Estrutura de projetos Python

Documenta√ß√£o (docstrings, sphinx)

Versionamento com Git/GitHub

Uso de .env e vari√°veis de ambiente

Empacotamento e publica√ß√£o de pacotes

Cont√™ineres (docker)

Deploy de modelos e apps